/*
 * Copyright (C) 2015 The greyfish authors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

allprojects {
    apply plugin: 'java'
    sourceCompatibility = 1.7
    group = 'org.asoem.greyfish'
    version = '1.3.0'
}

subprojects {
    apply plugin: 'maven-publish'

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://jitpack.io"
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allJava
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
            }
        }
    }

    test {
        include '**/*Test.class'
        exclude '**/Abstract*.class'
    }

    task integrationTest(type: Test, dependsOn: test) {
        include '**/*IT.class'
        exclude '**/Abstract*.class'
    }

    task acceptanceTest(type: Test, dependsOn: integrationTest) {
        include '**/*AT.class'
        exclude '**/Abstract*.class'
    }

    def getGitCommitHash = { ->
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'show', '-s', '--pretty=format:%H'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }

    jar {
        manifest {
            attributes("Git-Commit-Hash": getGitCommitHash())
        }
    }

    apply plugin: 'checkstyle'
    checkstyle {
        configFile = new File("${rootProject.projectDir}/config/checkstyle/checkstyle.xml")
        ignoreFailures = true
    }
}